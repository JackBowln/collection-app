generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:1234@localhost:5432/collection-api?schema=public"
}

// model User {
//   id                String              @id @default(cuid())
//   name              String
//   email             String              @unique
//   password          String
//   image             String?
//   emailVerified     DateTime?           @map("email_verified")
//   accounts          Account[]
//   Post              Post[]
//   Collection        Collection[]
//   Profile           Profile?
//   VerificationToken VerificationToken[]
//   sessions          Session[]

//   @@map(name: "users")
// }

// model Account {
//   id                 String            @id @default(cuid())
//   userId             String
//   tokenId            String
//   token              VerificationToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)
//   user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
//   type               String
//   provider           String
//   providerAccountId  String            @map("provider_account_id")
//   refresh_token      String?
//   access_token       String?
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?
//   session_state      String?
//   oauth_token_secret String?
//   oauth_token        String?

//   @@unique([provider, providerAccountId])
//   @@map("accounts")
// }

// model Session {
//   id           String      @id @default(cuid())
//   sessionToken String   @unique @map("session_token")
//   userId       String      @map("user_id")
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("sessions")
// }

// model VerificationToken {
//   id         String    @id @default(cuid())
//   identifier String
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt
//   token      String    @unique
//   expires    Int
//   token_type TokenType @default(API)
//   isValid    Boolean   @default(true)
//   account    Account[]
//   user       User      @relation(fields: [userId], references: [id])
//   userId     String

//   @@unique([id, identifier, token])
//   @@map("verificationtokens")
// }
model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int          @id @default(autoincrement())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  Collection    Collection[]
  Profile       Profile?

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Post {
  id        Int      @id @default(autoincrement())
  // id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Collection {
  id        Int      @id @default(autoincrement())
  // id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  data      Json
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  fields    Field[]
}

model Field {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  label        String
  type         FieldType   @default(text)
  placeholder  String?
  name         String
  Collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId Int?
}

model Profile {
  id     Int     @id @default(autoincrement())
  // id     String  @id @default(cuid())
  bio    String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
}

enum TokenType {
  EMAIL // used as a short-lived token sent to the user's email
  API
}

enum FieldType {
  color
  date
  email
  file
  image
  month
  number
  password
  radio
  range
  submit
  tel
  text
  time
  url
  week
}
